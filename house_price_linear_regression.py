# -*- coding: utf-8 -*-
"""House_Price_Linear_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cHvyY3jKgjDYz2C8e7nu4WuOwCpOmfvO
"""

import pandas as pd

data = {
    'Area_sqft': [1000, 1500, 2000, 2500, 3000],
    'Price': [100000, 150000, 200000, 250000, 300000]
}

df = pd.DataFrame(data)
print(df)

from sklearn.linear_model import LinearRegression

# Separate features (X) and target (y)
X = df[['Area_sqft']]   # independent variable
y = df['Price']         # dependent variable

# Create model
model = LinearRegression()

# Train model
model.fit(X, y)

# Check slope and intercept
print("Slope (m):", model.coef_[0])
print("Intercept (c):", model.intercept_)

predicted_price = model.predict([[4000]])
print("Predicted Price for 4000 sqft:", predicted_price[0])

import matplotlib.pyplot as plt

plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.xlabel('Area (sqft)')
plt.ylabel('Price (‚Çπ)')
plt.title('Linear Regression - House Price Prediction')
plt.legend()
plt.show()

import pandas as pd

# üß© Extended dataset for Multiple Linear Regression
data = {
    'Area_sqft': [1000, 1500, 2000, 2500, 3000],
    'Bedrooms': [2, 3, 3, 4, 4],
    'Age': [10, 8, 5, 3, 1],
    'Price': [100000, 150000, 200000, 250000, 300000]
}

df = pd.DataFrame(data)
print(df)

from sklearn.linear_model import LinearRegression

# Separate inputs (X) and target (y)
X = df[['Area_sqft', 'Bedrooms', 'Age']]
y = df['Price']

# Create and train model
model = LinearRegression()
model.fit(X, y)

# Show coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

predicted_price = model.predict([[2800, 4, 3]])
print("Predicted Price for 2800 sqft, 4 bedrooms, 3 years old house:", predicted_price[0])

#Prediction with more Datas, here the rooms and location will infulence the cost

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder

# Step 1: Create dataset
data = {
    'Area_sqft': [1000, 1500, 1800, 2400, 3000, 3500, 4000, 2200],
    'Bedrooms': [2, 3, 3, 4, 4, 5, 5, 3],
    'Age': [10, 7, 5, 3, 2, 8, 1, 4],
    'Location': ['Rural', 'Suburban', 'Urban', 'Urban', 'Urban', 'Suburban', 'Urban', 'Rural'],
    'Price': [2800000, 3600000, 4800000, 6000000, 7200000, 6500000, 8000000, 4000000]
}

df = pd.DataFrame(data)
print("üèòÔ∏è Raw Data:\n", df)

# Step 2: One-hot encode 'Location'
encoder = OneHotEncoder(drop='first', sparse_output=False)
encoded = encoder.fit_transform(df[['Location']])
encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out(['Location']))

# Step 3: Combine encoded columns with original data
df_encoded = pd.concat([df.drop('Location', axis=1), encoded_df], axis=1)
print("\nüìä Encoded Data:\n", df_encoded)

# Step 4: Split features and target
X = df_encoded.drop('Price', axis=1)
y = df_encoded['Price']

# Step 5: Train model
model = LinearRegression()
model.fit(X, y)

# Step 6: Display results
print("\n‚öôÔ∏è Model Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef:.2f}")

print("Intercept:", model.intercept_)

test_data = pd.DataFrame({
    'Area_sqft': [2600],
    'Bedrooms': [4],
    'Age': [3],
    'Location_Rural': [0],
    'Location_Suburban': [0],
    'Location_Urban': [1]  # Urban house
})

predicted_price = model.predict(test_data)[0]
print(f"\nüí∞ Predicted Price for test house: ‚Çπ{predicted_price:,.2f}")

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder

# Step 1: Create dataset
data = {
    'Area_sqft': [1000, 1500, 1800, 2400, 3000, 3500, 4000, 2200],
    'Bedrooms': [2, 3, 3, 4, 4, 5, 5, 3],
    'Age': [10, 7, 5, 3, 2, 8, 1, 4],
    'Location': ['Rural', 'Suburban', 'Urban', 'Urban', 'Urban', 'Suburban', 'Urban', 'Rural'],
    'Price': [2800000, 3600000, 4800000, 6000000, 7200000, 6500000, 8000000, 4000000]
}

df = pd.DataFrame(data)
print("üèòÔ∏è Raw Data:\n", df)

# Step 2: One-hot encode 'Location'
encoder = OneHotEncoder(drop='first', sparse_output=False)
encoded = encoder.fit_transform(df[['Location']])
encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out(['Location']))

# Step 3: Combine encoded columns with original data
df_encoded = pd.concat([df.drop('Location', axis=1), encoded_df], axis=1)
print("\nüìä Encoded Data:\n", df_encoded)

# Step 4: Split features and target
X = df_encoded.drop('Price', axis=1)
y = df_encoded['Price']

# Step 5: Train model
model = LinearRegression()
model.fit(X, y)

# Step 6: Display results
print("\n‚öôÔ∏è Model Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef:.2f}")

print("Intercept:", model.intercept_)

# Step 7: Prediction example
test_data = pd.DataFrame({
    'Area_sqft': [2600],
    'Bedrooms': [4],
    'Age': [3],
    'Location_Suburban': [0],
    'Location_Urban': [1]  # Urban house
})

predicted_price = model.predict(test_data)[0]
print(f"\nüí∞ Predicted Price for test house: ‚Çπ{predicted_price:,.2f}")